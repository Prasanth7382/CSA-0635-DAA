#include <stdio.h>
#include <limits.h>
#define V 4 
#define N 4
#define VISITED_ALL ((1 << N) - 1)
int tsp(int graph[N][N], int mask, int pos);
int graph[N][N] = {
    {0, 10, 15, 20},
    {10, 0, 35, 25},
    {15, 35, 0, 30},
    {20, 25, 30, 0}
};
int dp[N][1 << N];
int tsp(int graph[N][N], int mask, int pos)
 {
    if (mask == VISITED_ALL)
	 {
        return graph[pos][0];
    }
    if (dp[pos][mask] != -1)
	 {
        return dp[pos][mask];
    }
    int ans = INT_MAX;
    for (int city = 0; city < N; city++) 
	{
        if ((mask & (1 << city)) == 0)
		 {
            int newAns = graph[pos][city] + tsp(graph, mask | (1 << city), city);
            if (newAns < ans) 
			{
                ans = newAns;
            }
        }
    }
    return dp[pos][mask] = ans;
}
int main()
 {
     for (int i = 0; i < N; i++)
	  {
        for (int j = 0; j < (1 << N); j++)
		 {
            dp[i][j] = -1;
        }
    }
    int minCost = tsp(graph, 1, 0);
    printf("Minimum cost for TSP: %d\n", minCost);
    return 0;
}
